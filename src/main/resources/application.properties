#配置类的配置实际上是对类进行配置
#https://docs.spring.io/spring-boot/docs/2.1.14.BUILD-SNAPSHOT/reference/html/common-application-properties.html
#例如spring.thymeleaf.cache=false，实际是对ThymeleafAutoConfiguration该类进行配置，见spring手册.附录
#当写spring.thymeleaf时，实际是调用ThymeleafProperties这个类，cache为这个类的属性，false对其进行赋值，默认为true

#同理：server.port=8080实际是对ServerProperties类进行配置，见手册

##ServerProperties
#更改tomcat服务器端口号
server.port=8080
#通常会给项目取访问路径
server.servlet.context-path=/community

##ThymeleafAutoConfiguration――>ThymeleafProperties
#关掉thymeleaf缓存，默认是开启的
#在开发时，最好关掉模板的缓存，因为在页面修改的过程中，如果存在缓存，那显示效果会有延迟
spring.thymeleaf.cache=false


##DataSourceAutoConfiguration＆DataSourceProperties
# -->mysql数据库和连接池（数据源、统一管理连接的工厂、
# 作用1：统一的初始化一批连接，能够反复使用，效率高 2：管理连接上限，避免数据库负载）的配置

#JDBC驱动程序的全限定名称。默认情况下根据URL自动检测。
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#数据库的JDBC URL。
# 编码     不启用安全连接       时区
spring.datasource.url=jdbc:mysql://localhost:3306/community?characterEncoding=utf-8&useSSL=false&serverTimezone=Hongkong
spring.datasource.username=root
spring.datasource.password=root
#要使用的连接池实现的全限定名称。默认情况下，它是从类路径中自动检测到的
#spring boot内置多个连接池，使用HikariDataSource，性能最优
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
#最大连接数
spring.datasource.hikari.maximun-pool-size=15
#最小空闲连接，连接数少时，保留最少空闲数
spring.datasource.hikari.minimun-idle=5
#超时时间，连接空闲等待30000毫秒仍空闲，就关掉
spring.datasource.hikari.idle-timeout=30000

##MybatisProperties -> mybatis配置

#映射文件的存放位置，通常会把mapper放置在resources下，因为项目编译之后，mapper会在target的classes（类路径：classpath）下面
mybatis.mapper-locations=classpath:mapper/*.xml
#声明实体类所在包的包名，指定表映射到的实体类下,创建实体类封装某一张表的数据
#配置这个之后，在配置文件里引用实体类时不需要引用它的包名了
mybatis.type-aliases-package=com.mycode.community.entity
#启用自动生成组件,例如：insert时id为自增，启用后才有用
mybatis.configuration.useGeneratedKeys=true
#是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。
#驼峰命名：实体类一般是驼峰式命名：如headerUrl
#然后数据库类名一般以header_url
#而这个配置的意义就是将两种命名方式自动匹配，这样方便我们的使用
mybatis.configuration.mapUnderscoreToCamelCase=true

# logger
#logging.level.com.mycode.community=debug
#将日志打印到指定路径，生成日志文件
#logging.file=d:/Edit/Data/Community/community.log


#MailProperties（邮箱相关的配置类）

#声明邮箱的域名
spring.mail.host=smtp.sina.com
#基本上所有网站邮箱默认的端口都是465
spring.mail.port=465
#邮箱账号
spring.mail.username=ydtangxiaodong@sina.com
#这个密码填写的是授权码
spring.mail.password=4bc07cf97c70f6b0
#采用的协议，smtps表示采用的是安全的协议
spring.mail.protocol=smtps
#更详尽的配置
#表示邮箱协议的传输方式采用的是ssl安全传输协议
spring.mail.properties.mail.smtp.ssl.enable=true

# community （自定义）
# 自定义域名
community.path.domain=http://localhost:8080
# 自定义上传文件路径
community.path.upload=d:/Edit/Data/communityUpload

# redis配置 RedisProperties

# redis使用的库(0~15)
spring.redis.database=11
# redis库的ip：本机
spring.redis.host=localhost
# redis端口
spring.redis.port=6379


# KafkaProperties

# 配置server 服务器
spring.kafka.bootstrap-servers=localhost:9092
# 配置消费者,在配置文件中有
spring.kafka.consumer.group-id=community-consumer-group
# 是否自动提交消费者的偏移量（消费者读取消息时按住偏移量读取）
spring.kafka.consumer.enable-auto-commit=true
# 自动提交的频率（3秒）
spring.kafka.consumer.auto-commit-interval=3000

# 消费监听接口监听的主题不存在时，默认会报错(和spring boot版本有关)
spring.kafka.listener.missing-topics-fatal=false


# ElasticsearchProperties

# 集群名
spring.data.elasticsearch.cluster-name=mycode
# 声明节点（只有一个节点）,应用服务通常使用tcp协议访问es
spring.data.elasticsearch.cluster-nodes=127.0.0.1:9300

# elasticsearch的底层是基于netty的，redis的底层也是基于netty的
# 两者在共同使用的时候，启用netty时，会有冲突。
# 该冲突主要体现在ES的底层代码中，需要做一个小的变通
# 类：nettyRuntime中 availableProcessors() 与redis产生冲突
# 该方法由Netty4Utils类中的setAvailableProcessors方法，由elasticsearch调用


# spring的普通线程池-配置类：TaskExecutionProperties
# ThreadPoolTaskExecutor

# 线程池中的核心线程数量
spring.task.execution.pool.core-size=5
# 线程调用频繁，核心线程数不够用，自动扩容,最大数15
spring.task.execution.pool.max-size=15
# 队列容量-当线程到达了最大线程数量15，任务提交仍然频繁，线程不够用
# 此时，会将任务放入队列，当有空闲线程时，再从队列中取任务，起到一个缓冲的作用，提高线程池的性能
spring.task.execution.pool.queue-capacity=100


# spring的定时任务线程池-配置类：TaskSchedulingProperties
# ThreadPoolTaskScheduler

# 定时任务只需要配置一个，其他配置没有必要，普通任务是根据用户的请求来看的，多少都不一定
# 但是定时任务，是可以提前预判的，是我们为服务器设置的定时任务
spring.task.scheduling.pool.size=5


# QuartzProperties Quartz有默认的配置，一下配置对默认配置进行覆盖，按照自己的想法配置
# 任务存储的方式
spring.quartz.job-store-type=jdbc
# 调度器的名字
spring.quartz.scheduler-name=communityScheduler
# 调度器的id自动生成
spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO
# 任务在存储到数据库中时，使用哪个类来做这件事
spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
# 在存储式，使用的jdbc驱动是什么
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# 存储是否采用集群的方式
spring.quartz.properties.org.quartz.jobStore.isClustered=true
# 使用哪个线程池，Quartz自带的线程池SimpleThreadPool
spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
# 线程数量
spring.quartz.properties.org.quartz.threadPool.threadCount=5


# wk 自定义的配置

# wk生成图片的命令
wk.image.command=d:/work/wkhtmltopdf/bin/wkhtmltoimage
# wk生成图片的存储路径
wk.image.storage=d:/work/data/wk-image
