<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 命名空间的作用有两个，1、是利用更长的全限定名来将不同的语句隔离开来，
            2、实现了你上面见到的接口绑定，体现该Mapper文件是为谁服务的 -->
<mapper namespace="com.mycode.community.dao.MessageMapper">

    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <select id="selectConversations" resultType="Message">
        select <include refid="selectFields"></include>
        from message
            where id in (
            <!-- 获取当前用户的每组会话中信息的最大id（最新的一条letter：消息） -->
            select max(id)
            from message
            where from_id != 1
            and status != 2
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit};
    </select>

    <select id="selectConversationCount" resultType="int">
        select count(m.maxid)
        from (
            select max(id) as maxid
            from message
            where from_id != 1
            and status != 2
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        ) as m;
    </select>

    <select id="selectLetters" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where conversation_id = #{conversationId}
        and status != 2
        and from_id != 1
        order by id desc
        limit #{offset}, #{limit};
    </select>

    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where conversation_id = #{conversationId}
        and status != 2
        and from_id != 1;
    </select>

    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
        and status = 0;
    </select>

    <insert id="insertMessage" parameterType="Message">
        insert into message(<include refid="insertFields"></include>)
        values (#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime});
    </insert>

    <update id="updateMessageStatus">
        <!-- 多个id查找在sql中用id in ('','','','')来实现 -->
        <!-- 传入的id是多个，是一个集合，
            mybatis允许我们通过一个foreach的标签去遍历该集合，拼成一个括号，然后中间用逗号隔开的形式 -->
        update message set status = #{status}
        where id in
        <!-- collection:传入的集合，item：用来遍历集合的变量，
         open="(":表示以右括号开头， separator=","：表示以,隔开， close=")"：表示以左括号结尾-->
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

</mapper>