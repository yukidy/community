<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 命名空间的作用有两个，1、是利用更长的全限定名来将不同的语句隔离开来，
            2、实现了你上面见到的接口绑定，体现该Mapper文件是为谁服务的 -->
<mapper namespace="com.mycode.community.dao.UserMapper">

    <!-- 看到下面三个查询用户的sql会发现字段出有些许问题，假如需要更改字段，发现需要更改三处的字段，比较麻烦 -->
    <!-- 可以编写一下sql，让字段可以复用 -->
    <sql id="selectFields"> <!-- 查询的字段 -->
        id, username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>
    
    <sql id="insertFields">
        username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>
    
    <!-- id所对应的是方法名,resultType返回的数据类型，配置文件中配置过，所以此出不需要加全限定名，前面的包名可省略 -->
    <select id="selectById" resultType="User">
        <!-- 尽量不要使用*查询, #{id}表示引用方法的参数id -->
        select <include refid="selectFields"></include>
        from user
        where id = #{id}
    </select>

    <select id="selectByName" resultType="User">
        <!-- 尽量不要使用*查询, #{id}表示引用方法的参数id -->
        select <include refid="selectFields"></include>
        from user
        where username = #{username}
    </select>

    <select id="selectByEmail" resultType="User">
        <!-- 尽量不要使用*查询, #{id}表示引用方法的参数id -->
        select <include refid="selectFields"></include>
        from user
        where email = #{email};
    </select>

    <!-- parameterType:声明参数类型，keyProperty：对应自增的主键是谁，mysql生成id后回填到parameterType="User"中 -->
    <!-- 在mybatis的配置文件中，有个叫keyProperty和useGeneratedKeys的属性。
            useGeneratedKeys 参数只针对 insert 语句生效，默认为 false。
            当设置为 true 时，表示如果插入的表以自增列为主键，则允许 JDBC 支持自动生成主键，并可将自动生成的主键返回。
            具体用法：
                 useGeneratedKeys=”true” keyProperty=”对应的主键的对象”。
             其中自增在配置文件中已经配置完成   -->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into user (<include refid="insertFields"></include>)
        values (#{username}, #{password}, #{salt}, #{email}, #{type}, #{status}, #{activationCode}, #{headerUrl}, #{createTime});
    </insert>

    <!-- 往往更新后返回的字段比较简单，所以可以不用声明 -->
    <update id="updateStatus">
        update user set status = #{status} where id = #{id};
    </update>

    <update id="updateHeader">
        update user set header_url = #{headerUrl} where id = #{id};
    </update>

    <update id="updatePassword">
        update user set password = #{password} where id = #{id};
    </update>


</mapper>